package test.mypac;
/*
 * class의 역할
 * 
 * 1. 객체의 설계도 역할
 * 	- 객체는 heap 영역(사물함)에 들어 있는 물건이라고 생각하면 된다.
 * 	- class를 이용해서 객체를 원하는 시점에 원하는 갯수만큼 만들어낼 수 있다.
 *  - 만들어진 객체가 어떤 저장소(필드, 자바스크립트에서의 변수와 유사)와 
 *    어떤 기능(=메소드, 자바스크립트에서 함수와 유사)을 가지게 할지 class로 설계할 수 있다.
 * 	- 따라서 객체는 필드와 메소드로 이루어져 있다고 할 수 있다.
 *  - 필드는 메소드가 제대로 동작하기 위해 활용하는 값들을 담고 있다.
 *  - 이 말은 필드에 있는 값이 잘못되면 메소드가 잘못 동작하는 경우도 있다.
 *  
 * 2. data type 역할
 * 
 * 3. static 필드와 메소드를 포함하는 역할
 */
public class Car {
	/*
	 * [필드(객체가 저장되는 장소) 정의하기]
	 * - 클래스의 {} 중괄호 안에 아래와 같은 형식으로 필드를 정의 할 수 있다.
	 * - 초기 값을 부여하지 않으면 기본 값이 들어 간다.
	 * - int의 기본 값은 0, boolean의 기본 값은 false, 참조 데이터 type의 기본 값은 null
	 * 
	 * 	 접근지정자(어느 수준으로 접근하게 할 것인지 지정) data type 필드명 = 초기값;
	 */
	
	public String name = "자동차";
	public int price;
	
	/*
	 * [메소드(객체의 기능) 정의하기]
	 * 
	 * 접근지정자 return type 메소드명(){
	 * 		이 영역은 메소드 안쪽 블럭으로 메소드명()가 call 되었을 때
	 * 		실행 할 java code를 여러 줄 모아 놓을 수 있다.
	 * }
	 */
	public void drive() {
		//자기 자신을 참조값으로 나타내는 객체 명칭은 this이다.
		System.out.println(this.name + "가 달려요!");
	}
	
	public void showInfo() {
		System.out.println("차의 이름은 "+this.name+"이고 가격은 "+this.price+"만원 입니다.");
	}
}
